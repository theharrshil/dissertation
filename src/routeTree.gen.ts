/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')()
const ReportsLazyImport = createFileRoute('/reports')()
const RegisterLazyImport = createFileRoute('/register')()
const InvoicesLazyImport = createFileRoute('/invoices')()
const CartLazyImport = createFileRoute('/cart')()
const BrowseLazyImport = createFileRoute('/browse')()
const IndexLazyImport = createFileRoute('/')()
const RequestsIndexLazyImport = createFileRoute('/requests/')()
const ImagesIndexLazyImport = createFileRoute('/images/')()
const ExtrasIndexLazyImport = createFileRoute('/extras/')()
const ChoicesIndexLazyImport = createFileRoute('/choices/')()
const RequestsNewLazyImport = createFileRoute('/requests/new')()
const RequestsRequestIdLazyImport = createFileRoute('/requests/$requestId')()
const ProjectsIdLazyImport = createFileRoute('/projects/$id')()
const ImagesUploadLazyImport = createFileRoute('/images/upload')()
const ExtrasAddLazyImport = createFileRoute('/extras/add')()
const ChoicesAddLazyImport = createFileRoute('/choices/add')()
const AssignPlotIdIndexLazyImport = createFileRoute('/assign/$plotId/')()
const AssignPlotIdDIdLazyImport = createFileRoute('/assign/$plotId/$dId')()

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const ReportsLazyRoute = ReportsLazyImport.update({
  path: '/reports',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/reports.lazy').then((d) => d.Route))

const RegisterLazyRoute = RegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const InvoicesLazyRoute = InvoicesLazyImport.update({
  path: '/invoices',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/invoices.lazy').then((d) => d.Route))

const CartLazyRoute = CartLazyImport.update({
  path: '/cart',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cart.lazy').then((d) => d.Route))

const BrowseLazyRoute = BrowseLazyImport.update({
  path: '/browse',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/browse.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RequestsIndexLazyRoute = RequestsIndexLazyImport.update({
  path: '/requests/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/requests/index.lazy').then((d) => d.Route),
)

const ImagesIndexLazyRoute = ImagesIndexLazyImport.update({
  path: '/images/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/images/index.lazy').then((d) => d.Route))

const ExtrasIndexLazyRoute = ExtrasIndexLazyImport.update({
  path: '/extras/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/extras/index.lazy').then((d) => d.Route))

const ChoicesIndexLazyRoute = ChoicesIndexLazyImport.update({
  path: '/choices/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/choices/index.lazy').then((d) => d.Route))

const RequestsNewLazyRoute = RequestsNewLazyImport.update({
  path: '/requests/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/requests/new.lazy').then((d) => d.Route))

const RequestsRequestIdLazyRoute = RequestsRequestIdLazyImport.update({
  path: '/requests/$requestId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/requests/$requestId.lazy').then((d) => d.Route),
)

const ProjectsIdLazyRoute = ProjectsIdLazyImport.update({
  path: '/projects/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/projects/$id.lazy').then((d) => d.Route))

const ImagesUploadLazyRoute = ImagesUploadLazyImport.update({
  path: '/images/upload',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/images/upload.lazy').then((d) => d.Route))

const ExtrasAddLazyRoute = ExtrasAddLazyImport.update({
  path: '/extras/add',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/extras/add.lazy').then((d) => d.Route))

const ChoicesAddLazyRoute = ChoicesAddLazyImport.update({
  path: '/choices/add',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/choices/add.lazy').then((d) => d.Route))

const AssignPlotIdIndexLazyRoute = AssignPlotIdIndexLazyImport.update({
  path: '/assign/$plotId/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/assign/$plotId/index.lazy').then((d) => d.Route),
)

const AssignPlotIdDIdLazyRoute = AssignPlotIdDIdLazyImport.update({
  path: '/assign/$plotId/$dId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/assign/$plotId/$dId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/browse': {
      id: '/browse'
      path: '/browse'
      fullPath: '/browse'
      preLoaderRoute: typeof BrowseLazyImport
      parentRoute: typeof rootRoute
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartLazyImport
      parentRoute: typeof rootRoute
    }
    '/invoices': {
      id: '/invoices'
      path: '/invoices'
      fullPath: '/invoices'
      preLoaderRoute: typeof InvoicesLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/choices/add': {
      id: '/choices/add'
      path: '/choices/add'
      fullPath: '/choices/add'
      preLoaderRoute: typeof ChoicesAddLazyImport
      parentRoute: typeof rootRoute
    }
    '/extras/add': {
      id: '/extras/add'
      path: '/extras/add'
      fullPath: '/extras/add'
      preLoaderRoute: typeof ExtrasAddLazyImport
      parentRoute: typeof rootRoute
    }
    '/images/upload': {
      id: '/images/upload'
      path: '/images/upload'
      fullPath: '/images/upload'
      preLoaderRoute: typeof ImagesUploadLazyImport
      parentRoute: typeof rootRoute
    }
    '/projects/$id': {
      id: '/projects/$id'
      path: '/projects/$id'
      fullPath: '/projects/$id'
      preLoaderRoute: typeof ProjectsIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/requests/$requestId': {
      id: '/requests/$requestId'
      path: '/requests/$requestId'
      fullPath: '/requests/$requestId'
      preLoaderRoute: typeof RequestsRequestIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/requests/new': {
      id: '/requests/new'
      path: '/requests/new'
      fullPath: '/requests/new'
      preLoaderRoute: typeof RequestsNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/choices/': {
      id: '/choices/'
      path: '/choices'
      fullPath: '/choices'
      preLoaderRoute: typeof ChoicesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/extras/': {
      id: '/extras/'
      path: '/extras'
      fullPath: '/extras'
      preLoaderRoute: typeof ExtrasIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/images/': {
      id: '/images/'
      path: '/images'
      fullPath: '/images'
      preLoaderRoute: typeof ImagesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/requests/': {
      id: '/requests/'
      path: '/requests'
      fullPath: '/requests'
      preLoaderRoute: typeof RequestsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/assign/$plotId/$dId': {
      id: '/assign/$plotId/$dId'
      path: '/assign/$plotId/$dId'
      fullPath: '/assign/$plotId/$dId'
      preLoaderRoute: typeof AssignPlotIdDIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/assign/$plotId/': {
      id: '/assign/$plotId/'
      path: '/assign/$plotId'
      fullPath: '/assign/$plotId'
      preLoaderRoute: typeof AssignPlotIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  BrowseLazyRoute,
  CartLazyRoute,
  InvoicesLazyRoute,
  RegisterLazyRoute,
  ReportsLazyRoute,
  SettingsLazyRoute,
  ChoicesAddLazyRoute,
  ExtrasAddLazyRoute,
  ImagesUploadLazyRoute,
  ProjectsIdLazyRoute,
  RequestsRequestIdLazyRoute,
  RequestsNewLazyRoute,
  ChoicesIndexLazyRoute,
  ExtrasIndexLazyRoute,
  ImagesIndexLazyRoute,
  RequestsIndexLazyRoute,
  AssignPlotIdDIdLazyRoute,
  AssignPlotIdIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/browse",
        "/cart",
        "/invoices",
        "/register",
        "/reports",
        "/settings",
        "/choices/add",
        "/extras/add",
        "/images/upload",
        "/projects/$id",
        "/requests/$requestId",
        "/requests/new",
        "/choices/",
        "/extras/",
        "/images/",
        "/requests/",
        "/assign/$plotId/$dId",
        "/assign/$plotId/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/browse": {
      "filePath": "browse.lazy.tsx"
    },
    "/cart": {
      "filePath": "cart.lazy.tsx"
    },
    "/invoices": {
      "filePath": "invoices.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    },
    "/reports": {
      "filePath": "reports.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/choices/add": {
      "filePath": "choices/add.lazy.tsx"
    },
    "/extras/add": {
      "filePath": "extras/add.lazy.tsx"
    },
    "/images/upload": {
      "filePath": "images/upload.lazy.tsx"
    },
    "/projects/$id": {
      "filePath": "projects/$id.lazy.tsx"
    },
    "/requests/$requestId": {
      "filePath": "requests/$requestId.lazy.tsx"
    },
    "/requests/new": {
      "filePath": "requests/new.lazy.tsx"
    },
    "/choices/": {
      "filePath": "choices/index.lazy.tsx"
    },
    "/extras/": {
      "filePath": "extras/index.lazy.tsx"
    },
    "/images/": {
      "filePath": "images/index.lazy.tsx"
    },
    "/requests/": {
      "filePath": "requests/index.lazy.tsx"
    },
    "/assign/$plotId/$dId": {
      "filePath": "assign/$plotId/$dId.lazy.tsx"
    },
    "/assign/$plotId/": {
      "filePath": "assign/$plotId/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
